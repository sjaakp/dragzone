/*
 *  dragzone.js - drag small HTML element(s) inside a bigger element.
 *  Version 1.0.1
 *  (c) Sjaak Priester, Amsterdam, 2025 MIT license
 *  https://sjaakpriester.nl/software/dragzone
 *  https://github.com/sjaakp/dragzone
 */
function DragZone(e){this.zone=e,e.dragzone=this,this.disabled=void 0!==e.dataset.disable,this.disabled&&this.disable(),this.precision=+(e.dataset.precision||3),this.onPointerMove=(function(e){let t=e.pageX-this.x,i=e.pageY-this.y,s=this.dragged.offsetWidth/2,o=this.dragged.offsetHeight/2;this.x=e.pageX,this.y=e.pageY;let a=Math.min(Math.max(this.dragged.offsetLeft+t,-s),this.zone.clientWidth-s),n=Math.min(Math.max(this.dragged.offsetTop+i,-o),this.zone.clientHeight-o),d=this.dragged.style;d.left=`${a}px`,d.top=`${n}px`}).bind(this),this.onPointerUp=(function(){console.log(this.getPositions({changed:this.dragged.dataset.draggable})),this.zone.dispatchEvent(new CustomEvent("dragzone.changed",{detail:this.getPositions({changed:this.dragged.dataset.draggable})})),document.removeEventListener("pointerup",this.onPointerUp),this.zone.removeEventListener("pointermove",this.onPointerMove)}).bind(this),e.querySelectorAll("[data-draggable]").forEach(e=>{e.addEventListener("pointerdown",e=>{this.disabled||(this.dragged=e.target,this.x=e.pageX,this.y=e.pageY,document.addEventListener("pointerup",this.onPointerUp),this.zone.addEventListener("pointermove",this.onPointerMove),this.zone.dispatchEvent(new CustomEvent("dragzone.changing",{detail:this.getPositions({changing:this.dragged.dataset.draggable})})))})});let t=e.dataset.dragzone;t?this.setPositions(t):this.home()}function dragzone(){let e=document.createElement("style");e.appendChild(document.createTextNode(`[data-dragzone]{position:relative;overflow:clip;}
[data-draggable]{position:absolute;top:0;left:0;user-select:none;cursor:move;}.zone-disabled [data-draggable] {cursor: auto;}`)),document.head.appendChild(e),document.querySelectorAll("[data-dragzone]").forEach(e=>{new DragZone(e)})}DragZone.prototype={home(){let e=0;this.zone.querySelectorAll("[data-draggable]").forEach(t=>{t.style.left="0",t.style.top=`${e}px`,e+=t.offsetHeight+2})},getPositions(e={}){return this.zone.querySelectorAll("[data-draggable]").forEach(t=>{e[t.dataset.draggable]={x:((t.offsetLeft+t.offsetWidth/2)/this.zone.clientWidth).toPrecision(this.precision),y:((t.offsetTop+t.offsetHeight/2)/this.zone.clientHeight).toPrecision(this.precision)}}),JSON.stringify(e,null,2)},setPositions(e){let t=JSON.parse(e);this.zone.querySelectorAll("[data-draggable]").forEach(e=>{let i=t[e.dataset.draggable];if(i){let s=i.x*this.zone.clientWidth-e.offsetWidth/2,o=i.y*this.zone.clientHeight-e.offsetHeight/2;e.style.left=`${s}px`,e.style.top=`${o}px`}})},enable(){this.disabled=!1,this.zone.classList.remove("zone-disabled")},disable(){this.disabled=!0,this.zone.classList.add("zone-disabled")}},dragzone();